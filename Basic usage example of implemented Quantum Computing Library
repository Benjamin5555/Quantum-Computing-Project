{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Basic usage example.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMQ6YKNulueZncD+d3BTiPR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Benjamin5555/Quantum-Computing-Project/blob/master/Basic%20usage%20example%20of%20implemented%20Quantum%20Computing%20Library\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dTg1yhuoNXNj",
        "colab_type": "text"
      },
      "source": [
        "# Basic Usage Example of the implemented Quantum Computing Library"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m3JyoXPpNVL7",
        "colab_type": "text"
      },
      "source": [
        "Below is to make the library work on jupyter notebooks"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XVfnFkPzwT5d",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "%%capture\n",
        "%cd ~\n",
        "!git clone https://github.com/Benjamin5555/Quantum-Computing-Project.git\n",
        "%cd Quantum-Computing-Project\n",
        "!python3 setup.py install\n",
        "\n",
        "import sys\n",
        "sys.path.append(\"/root/Quantum-Computing-Project/circuit_model_library\")\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lnWL06mfwVhG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from circuit_model_library import circuit_model, matrices\n",
        "from scipy.sparse import csr_matrix\n",
        "import numpy as np"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U1hkLCAm1V2g",
        "colab_type": "text"
      },
      "source": [
        "## Define a selection of gates and place ito a dictionary"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7hXKTnG-xZ5c",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Hadamard Gate\n",
        "H = circuit_model.Gate(2**(-1/2) * np.array([[1,  1],\\\n",
        "                                             [1, -1]]))  \n",
        "\n",
        "#Pauli X Gate (Not gate)                                              \n",
        "X = circuit_model.Gate([[0, 1],\\\n",
        "                        [1, 0]])                        \n",
        "\n",
        "#Identity Gate                                      \n",
        "I = circuit_model.Gate([[1, 0],\\\n",
        "                        [0, 1]])\n",
        "\n",
        "\n",
        "\n",
        "gates_dictionary ={\"I\":I,\\\n",
        "                   \"H\":H,\\\n",
        "                   \"X\":X}"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C1poNO2N1kb4",
        "colab_type": "text"
      },
      "source": [
        "## Define a string to represent a circuit (such as https://drive.google.com/file/d/1GnfdjAHMee3WCNxplf6NKsZweLXL-wBg/view?usp=sharing) to superimpose both qubit in a two qubit register "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X2Z1iNtX2O0Q",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "circuit_string_list = [\"IH\",\"HI\"]\n",
        "\n",
        "#Currently system only works with 'square' circuits "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "92Ir0gzy2hAt",
        "colab_type": "text"
      },
      "source": [
        "### Define a register to apply the circuit to |00>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X52doUIF2odD",
        "colab_type": "code",
        "outputId": "04082fca-b43c-4a03-dece-613500d4a7ff",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "register_00 = circuit_model.QuantumRegister([0],shape=(4,1)) \n",
        "print(register_00)"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1.]\n",
            " [0.]\n",
            " [0.]\n",
            " [0.]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fy2ZocH93qfF",
        "colab_type": "text"
      },
      "source": [
        "### Create single Hadamard circuit 'object'\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "accBpkNF30TN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "circuit_Hadamard = circuit_model.QuantumCircuit(\\\n",
        "                                                circuit_string_list,\\\n",
        "                                                gates_dictionary)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-JBMC-yf4Jxm",
        "colab_type": "text"
      },
      "source": [
        "### Can then apply the circuit to a register"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aOTI5ezM4N2w",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "out_register = circuit_Hadamard.apply(register_00)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OYRH312h4iK2",
        "colab_type": "text"
      },
      "source": [
        "### We expect applying the Hadamard gate to the both qubits in state $|0>$ to produce a superposition of states i.e. $A|00>+B|01>+C|10>+D|11>$ with equal probability\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rbWXxI6m50J-",
        "colab_type": "code",
        "outputId": "3861b511-baea-4ff9-82ca-632dd06e4402",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "print(out_register)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.5]\n",
            " [0.5]\n",
            " [0.5]\n",
            " [0.5]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GbT6wPm159Fx",
        "colab_type": "text"
      },
      "source": [
        "### Which we can then make a measurment on to get the states..."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_Y7EWyQaHTr9",
        "colab_type": "code",
        "outputId": "3d6f6146-878a-4572-c95c-0e4e125a3dcd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "print(out_register.measure()[0])"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0 1 2 3]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8hZrwAXFHoTJ",
        "colab_type": "text"
      },
      "source": [
        "### ...And their probabilites"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZI-tAY2YHWPH",
        "colab_type": "code",
        "outputId": "a05a7a9c-93a8-4371-8261-2e9749a6eb0c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "print(out_register.measure()[1])"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0.25 0.25 0.25 0.25]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JsdgJcOqfVGc",
        "colab_type": "text"
      },
      "source": [
        "## Current Issues"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HVoI9nFQfaqA",
        "colab_type": "text"
      },
      "source": [
        "### Only works for certain square gates such as Hadamard, haven't thought out how to apply to something like a controlled not gate, also requires the input circuit to be square e.g. [\"HI\",\"II\"] not simpy [\"H\"]\n",
        "![Controlled Not Gate](https://wikimedia.org/api/rest_v1/media/math/render/svg/7902c186299d0d276596546bb94df25cf3f35c63)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "homxJxlLf36t",
        "colab_type": "text"
      },
      "source": [
        "## Input string to represent a circuit might not be most logical way of showing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DRjAflfDfmw0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "register_00 = circuit_model.QuantumRegister([0],shape=(4,1)) \n",
        "circuit_single_Hadamard = circuit_model.QuantumCircuit([\"IH\",\"II\"],gates_dictionary)\n",
        "out_register_single_H = circuit_single_Hadamard.apply(register_00)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "odRgKwbBjbDQ",
        "colab_type": "text"
      },
      "source": [
        "It is potentially unclear which qubit we have applied the Hadamard gate to in this case apparently the second qubit as we end up with a superposition of the 2 state i.e. [[0],\n",
        "                                   [0],\n",
        "                                   [1],\n",
        "                                   [0]]\n",
        "and the 0 state i.e. [[1],[0],[0],[0]]\n",
        "\n",
        "in equal probability. This may not be the logical outcome we would expect"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "che1JF9rjccu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "bc7f1730-9118-4b77-b621-5117d8343564"
      },
      "source": [
        "print(out_register_single_H.measure()[0])\n",
        "\n",
        "print(out_register_single_H.measure()[1])"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0 2]\n",
            "[0.5 0.5]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KTOmbh3xlVn8",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pEkGpluFkMFF",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "7bba4a4f-dc58-49bd-a6cf-5047081ab25d"
      },
      "source": [
        "register_00 = circuit_model.QuantumRegister([0],shape=(4,1)) \n",
        "circuit_single_Hadamard = circuit_model.QuantumCircuit([\"II\",\"HI\"],gates_dictionary)\n",
        "out_register_single_H = circuit_single_Hadamard.apply(register_00)\n",
        "print(out_register_single_H.measure()[0])\n",
        "\n",
        "print(out_register_single_H.measure()[1])"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0 1]\n",
            "[0.5 0.5]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lAFYfOqblAJw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}